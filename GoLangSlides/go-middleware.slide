Go'ing easy

Про досвід розробки на Go координатора розподілених обчислень
Tags: go golang

Тарас Кушнір
kushnirTV@gmail.com

* Задача

.image ./materials/CoordinatorScheme.png
.caption _Load_Balancing_Problem_

* Рішення

.image ./materials/CoordinatorWithGoScheme.png
.caption _Load_Balancing_Problem_

* Коротко про мову Go

- виглядає динамічно типізованою, проста для програміста
- кросплатформенна
- Open Source
- компільована, статично типізована  мова програмування із автоматичним звільненням пам'яті
- мова програмування від Google створена для вирішення проблем Google
- специфікацію можна прочитати повністю за короткий час

* Hello, world

.code ./materials/helloworld.go

* Проблеми, які мав вирішити Go

* Швидкість компіляції

- компіляція супер швидка
- відсутність заголовочних файлів за рахунок неявної реалізації інтерфейсу
- величезна кількість помилок виявляється на етапі компіляції
- дотичність версій мов (CPython тощо)


* Сучасність

C++ 1979, Python 1989, Java 1990, Ruby 1993

Проблеми Google:
- багато заліза та багато програм
- сервери на C++ та Java/Python для решти

Рішення в Go:
- ідейно створена для розподіленого виконання
- багата стандартна бібліотека

* Складність програмування

- Скільки в Go ключових слів для циклів? - Одне: for
- Чому в Go використовується Garbage Collector? - Бо так простіше для розподілених обчислень
- Чому в Go немає наслідування? - Бо наслідування часто незручно міняти
- Скільки в Go ключових слів? - 25 (в С++ 48, в Java 50)
- Чому в Go використана модель CSP для розподіленого виконання? - Бо м'ютекси та критичні секції часто тяжко використати правильно

*CSP - Communication Sequential Processes - формальна мова для опису
   взаємодії у розподілених системах, розроблена у 1978 Anthony Hoare

* Відмінності від С/С++

* Дрібні відмінності

- вказівники без арифметики
    p++
- неявні приведення типів відсутні
- константи
    const Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009
- %v
    fmt.Printf("%v %v out of %v", 4.5, "percent", 100)
    // 4.5 percent out of 100

- повернення кількох результатів у функції
    n, err = buf.Read(100)
    n, _   = buf.Read(100)
    
* Дані та функції

Функції та дані ортогональні

.code ./materials/data_and_functions.go /START OMIT/,/END OMIT/

Duck typing на етапі компіляції

.code ./materials/data_and_interface.go /START OMIT/,/END OMIT/

* Видимість імен

- ThisNameIsPublic
- thisOneIsNot

Переваги:

- простота
- очевидність (з імені змінної видно її видимість)
- один механізм для типу, змінних та констант

* Multicore programming

* Модель CSP (Communicating Sequential Processes)

- формальна математична мова
- алгебра процесів
- пересилання повідомлень

Примітиви: події (a), прості процеси (P)

    a -> P

Види:

- детерміністичні
     a -> P  ||  b -> Q
- недетерміністичні
     a -> P   |||   b -> Q

* Підтримка CSP в Go: channels, goroutines

Start a goroutine:

    go f()

Send to a channel:

    ch <- value

Read from a channel:

    value = <-ch

* Особливості

- стек росте по мірі необхідності
- замикання прості за рахунок ортогональності функції
- простий синтаксис
- немає переповнення стеку
- Garbage collection запобігає проблемам звільнення пам'яті
