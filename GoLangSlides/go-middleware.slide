Go'ing easy

Про досвід розробки на Go координатора розподілених обчислень
Tags: go golang

Тарас Кушнір
kushnirTV@gmail.com

* Задача

.image ./materials/CoordinatorScheme.png
.caption _Load_Balancing_Problem_

* Рішення

.image ./materials/CoordinatorWithGoScheme.png
.caption _Load_Balancing_Problem_

* Коротко про мову Go

- виглядає динамічно типізованою, проста для програміста
- кросплатформенна
- Open Source
- компільована, статично типізована  мова програмування із автоматичним звільненням пам'яті
- мова програмування від Google створена для вирішення проблем Google


* Проблеми, які мав вирішити Go

1. _Швидкість_компіляції_

- компіляція супер швидка
- відсутність заголовочних файлів за рахунок неявної реалізації інтерфейсу
- величезна кількість помилок виявляється на етапі компіляції
- дотичність версій мов (CPython тощо)


* Проблеми, які мав вирішити Go

2. _Сучасність_

C++ 1979, Python 1989, Java 1990, Ruby 1993

Проблеми Google:
- багато заліза та багато програм
- сервери на C++ та Java/Python для решти

Рішення в Go:
- ідейно створена для розподіленого виконання
- багата стандартна бібліотека

* Проблеми, які мала вирішити Go

3. _Складність_програмування_

- Скільки в Go ключових слів для циклів? - Одне: for
- Чому в Go використовується Garbage Collector? - бо так простіше для розподілених обчислень
- Чому в Go немає наслідування? - Бо наслідування часто незручно міняти
- Скільки в Go ключових слів? - 25 (в С++ 48, в Java 50)
- Чому в Go використана модель CSP для розподіленого виконання? - Бо м'ютекси та критичні секції часто тяжко використати правильно

*CSP - Communication Sequential Processes - формальна мова для опису
   взаємодії у розподілених системах, розроблена у 1978 Anthony Hoare

   







