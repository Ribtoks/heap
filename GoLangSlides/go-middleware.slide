Go'ing easy

Про досвід розробки на Go координатора розподілених обчислень
Tags: go golang

Тарас Кушнір
kushnirTV@gmail.com

* Задача

.image ./materials/CoordinatorScheme.png
.caption _Load_Balancing_Problem_

* Рішення

.image ./materials/CoordinatorWithGoScheme.png
.caption _Load_Balancing_Problem_

* Коротко про мову Go

* Кросплатформенна

.image ./materials/cross-platform.png _ 1000

* Open Source

.image ./materials/Open_Source_Initiative.png _ 500

* Вирішення проблем Google

.image ./materials/Google_logo.png _ 500

* Специфікація

.image ./materials/golang_spec.png _ 1200

* Duck typing

.image ./materials/duck_typing.png _ 700

* Hello, world

.code ./materials/helloworld.go

* Проблеми, які мав вирішити Go

* Швидкість компіляції

- компіляція супер швидка
- відсутність заголовочних файлів за рахунок неявної реалізації інтерфейсу
- величезна кількість помилок виявляється на етапі компіляції
- дотичність версій мов (CPython тощо)

* Сучасність

C++ 1979, Python 1989, Java 1990, Ruby 1993

Проблеми Google:
- багато заліза та багато програм
- сервери на C++ та Java/Python для решти

Рішення в Go:
- ідейно створена для розподіленого виконання
- багата стандартна бібліотека

* Складність програмування

- Скільки в Go ключових слів для циклів? - Одне: for
- Чому в Go використовується Garbage Collector? - Бо так простіше для розподілених обчислень
- Чому в Go немає наслідування? - Бо наслідування часто незручно міняти
- Скільки в Go ключових слів? - 25 (в С++ 48, в Java 50)
- Чому в Go використана модель CSP для розподіленого виконання? - Бо м'ютекси та критичні секції часто тяжко використати правильно

*CSP - Communication Sequential Processes - формальна мова для опису
   взаємодії у розподілених системах, розроблена у 1978 Anthony Hoare

* Відмінності від С/С++

* Дрібні відмінності

- вказівники без арифметики
    p++
- неявні приведення типів відсутні
- константи
    const Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009

* Defer

.play ./materials/defer-demo.go /START OMIT/,/END OMIT/

* Повернення кількох значень у функції

.play ./materials/multiple-return-demo.go /START OMIT/,/END OMIT/
    
* Дані та функції

Функції та дані ортогональні

.code ./materials/data_and_functions.go /START OMIT/,/END OMIT/

Duck typing на етапі компіляції

.code ./materials/data_and_interface.go /START OMIT/,/END OMIT/

* Видимість імен

- ThisNameIsPublic
- thisOneIsNot

Переваги:

- простота
- очевидність (з імені змінної видно її видимість)
- один механізм для типу, змінних та констант

* Multicore programming

* Модель CSP (Communicating Sequential Processes) 1978

.image ./materials/Sir_Tony_Hoare.jpg _ 500
.caption _Sir_Tony_Hoare_

* Модель CSP (Communicating Sequential Processes)

- формальна математична мова
- алгебра процесів
- пересилання повідомлень

Примітиви: події (a), прості процеси (P)

    a -> P

Види:

- детерміністичні
     a -> P  ||  b -> Q
- недетерміністичні
     a -> P   |||   b -> Q

* Типізований Pipe

// TODO

* Підтримка CSP в Go: channels, goroutines

Start a goroutine:

    go f()

Send to a channel:

    ch <- value

Read from a channel:

    value = <-ch

* Особливості

- стек росте по мірі необхідності
- замикання прості за рахунок ортогональності функції
- простий синтаксис
- немає переповнення стеку
- Garbage collection запобігає проблемам звільнення пам'яті

* Goroutines

.play ./materials/goroutine-demo.go

* Goroutines

.play ./materials/goroutine-demo2.go /START OMIT/,/END OMIT/

* Channels

.play ./materials/channel-demo.go /START OMIT/,/END OMIT/