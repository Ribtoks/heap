Go'ing easy

Про досвід розробки на Go координатора розподілених обчислень
Tags: go, golang, middleware

Тарас Кушнір
kushnirTV@gmail.com
https://github.com/Ribtoks

* Задача

.image materials/CoordinatorScheme.png
.caption _Load_Balancing_Problem_

* Рішення

.image materials/CoordinatorWithGoScheme.png
.caption _Load_Balancing_Problem_

* Коротко про мову Go

* Кросплатформенна

.image materials/cross-platform.png _ 1000

* Open Source

.image materials/Open_Source_Initiative.png _ 500

* Вирішення проблем Google

.image materials/Google_Logo.png _ 500

* Специфікація

.image materials/golang_spec.png _ 550

* Duck typing

.image materials/duck_typing.png _ 700

* Hello, world

.code materials/helloworld.go

*Hello*world*2.0*

.code materials/helloworld2.go

* Проблеми, які мав вирішити Go

* Швидкість компіляції

- компіляція супер швидка
- відсутність заголовочних файлів за рахунок неявної реалізації інтерфейсу
- величезна кількість помилок виявляється на етапі компіляції
- дотичність версій мов (CPython тощо)

* Сучасність

C++ 1979, Python 1989, Java 1990, Ruby 1993

Проблеми Google:
- багато заліза та багато програм
- сервери на C++ та Java/Python для решти

Рішення в Go:
- ідейно створена для розподіленого виконання
- багата стандартна бібліотека

* Складність програмування

* Ключові слова

- Скільки в Go ключових слів для циклів?

* Ключові слова

1. for

.code materials/for_keyword_demo.go  /START OMIT/,/END OMIT/

* Ключові слова

- Скільки в Go ключових слів? - 25 (в С++ 48, в Java 50)

.image materials/golang_spec_keywords.png _ 1200
.caption _Ключові_слова_в_Go_

* Складність програмування

- Чому в Go використовується Garbage Collector? - Бо так простіше для розподілених обчислень
- Чому в Go немає наслідування? - Бо наслідування часто незручно міняти

* Відмінності від С/С++

* Оголошення змінних

    var a int

або

    s := "text"

функції

    func f(a int, s string) {
    }

Типи даних

    type MyType struct {
        a, b int
        text string
    }
    

* Вказівники

- вказівники важливі для швидкодії, арифметика вказівників - ні
- можна тримати вказівник на частину struct
- інкремент - інструкція, а не вираз
    f(p++) та q[++i]

* Константи

.play materials/constants_demo.go /START OMIT/,/END OMIT/

* Defer

.play materials/defer-demo.go /START OMIT/,/END OMIT/

* Повернення кількох значень, ініціалізація, %v

.play materials/multiple-return-demo.go /START OMIT/,/END OMIT/
    
* Дані та функції

Функції та дані ортогональні

.code materials/data_and_functions.go /START OMIT/,/END OMIT/

Duck typing на етапі компіляції

.code materials/data_and_interface.go /START OMIT/,/END OMIT/

* Видимість імен

- ThisNameIsPublic
- thisOneIsNot

Переваги:

- простота
- очевидність (з імені змінної видно її видимість)
- один механізм для типу, змінних та констант

* Multicore programming

* Модель CSP (Communicating Sequential Processes) 1978

.image materials/Sir_Tony_Hoare.jpg _ 500
.caption _Sir_Tony_Hoare_

* Модель CSP (Communicating Sequential Processes)

- формальна математична мова
- алгебра процесів
- пересилання повідомлень

Примітиви: події (a), прості процеси (P)

    a -> P

Види:

- детерміністичні
     a -> P  ||  b -> Q
- недетерміністичні
     a -> P   |||   b -> Q

* Типізований Pipe

.image materials/pipe.png _ 1000
.caption _Channel_model_in_Go_

* Підтримка CSP в Go: channels, goroutines

Start a goroutine:

    go f()

Send to a channel:

    ch <- value

Read from a channel:

    value = <-ch

* Особливості

- стек росте по мірі необхідності
- замикання прості за рахунок ортогональності функції
- простий синтаксис
- немає переповнення стеку
- Garbage collection запобігає проблемам звільнення пам'яті

* Goroutines

.play materials/goroutine-demo.go

* Goroutines

.play materials/goroutine-demo2.go /START OMIT/,/END OMIT/

* Channels

.play materials/channel-demo.go /START OMIT/,/END OMIT/

* Go та C++

* Базові виклики

.play materials/basic-cpp-demo.go /START OMIT/,/END OMIT/

* Параметри компіляції

.code materials/cpp-demo.h

Go:

.play materials/cpp-demo.go /START OMIT/,/END OMIT/

* Go в щоденному програмуванні

* Pass by value

.play materials/pass-by-value.go

* Math

.image materials/go-math-float64.png _ 800

* Виклики C++

Інтерфейс

    void traceRays(void *computator, long long startIndex, long long endIndex, float **results);

Виклик:

    resultsPtr := (**C.float)(unsafe.Pointer((&refResults[0])))
    
    C.traceRays(computator.p, C.longlong(startIndex), C.longlong(endIndex), resultsPtr)

* Логування

.code materials/logfile-demo.go /START OMIT/,/END OMIT/
    
* IDE

.image materials/vim_emacs.png

- Emacs, Vim
- LiteIDE, Sublime, Intellij

[[http://www.reddit.com/r/golang/comments/2739gp/golang_ides/][Go's IDE at Reddit]]

* Debugging

.image materials/debug.png

    Although we will endeavor to keep basic gdb functionality (stack traces,
    printing values) working on supported platforms, the ability to use the
    debugger to understand a Go program's full environment will likely never
    work, and improving gdb support is not a priority for the team.
    -rob

- GDB
- Eclipse
- Zeus

* Load Balancer

- пасивний режим
- keep alive status
- priority queue
- [[https://talks.golang.org/2012/concurrency.slide][Go Concurrency Patterns]]
- [[https://github.com/eleks/goordinator][Goordinator at GitHub]]
- [[http://elekslabs.com][Стаття на EleksLabs]]

* Raytracer

.image materials/scene.png
